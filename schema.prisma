generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  GUEST
  HOST
  ADMIN
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DocType {
  V5C
  INSURANCE
  MOT
  ROAD_TAX
  DRIVER_LICENSE
  OTHER
}

enum DocStatus {
  UPLOADED
  VERIFIED
  REJECTED
  EXPIRED
}

enum VehicleStatus {
  DRAFT
  ACTIVE
  SUSPENDED
}

enum BookingStatus {
  QUOTED
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
  DISPUTED
}

enum PayoutStatus {
  CREATED
  PAID
  FAILED
  CANCELED
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  hashedPassword   String
  role             UserRole  @default(GUEST)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  kycStatus        KycStatus @default(PENDING)
  stripeCustomerId String?   @unique
  stripeAccountId  String?   @unique

  firstName        String?
  lastName         String?
  phone            String?
  dateOfBirth      DateTime?
  driverLicenseNum String?

  vehicles         Vehicle[]
  bookings         Booking[] @relation("BookingGuest")
  messages         Message[]
  reviews          Review[]  @relation("ReviewAuthor")
  payouts          Payout[]
}

model Vehicle {
  id           String        @id @default(cuid())
  ownerId      String
  owner        User          @relation(fields: [ownerId], references: [id])
  make         String
  model        String
  year         Int
  trim         String?
  regPlate     String        @unique
  vin          String?
  seats        Int?
  doors        Int?
  bodyType     String?
  transmission String?
  fuelType     String?
  color        String?
  mileage      Int?
  description  String?
  status       VehicleStatus @default(DRAFT)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  images       Image[]
  documents    VehicleDocument[]
  listing      Listing?
}

model Image {
  id         String   @id @default(cuid())
  vehicleId  String
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])
  url        String
  sortOrder  Int      @default(0)
}

model VehicleDocument {
  id         String    @id @default(cuid())
  vehicleId  String
  vehicle    Vehicle   @relation(fields: [vehicleId], references: [id])
  type       DocType
  status     DocStatus @default(UPLOADED)
  fileUrl    String
  verifiedBy String?
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())
}

model Listing {
  id              String           @id @default(cuid())
  vehicleId       String           @unique
  vehicle         Vehicle          @relation(fields: [vehicleId], references: [id])
  basePrice       Int
  hourlyPrice     Int?
  currency        String           @default("GBP")
  minDays         Int              @default(1)
  maxDays         Int?
  deliveryFee     Int?
  instantBook     Boolean          @default(true)
  rules           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  availability    AvailabilityBlock[]
  bookings        Booking[]
  pricingRules    PricingRule[]
  ratingAvg       Float?           @default(0)
  ratingCount     Int              @default(0)
  isActive        Boolean          @default(true)
}

model PricingRule {
  id         String  @id @default(cuid())
  listingId  String
  listing    Listing @relation(fields: [listingId], references: [id])
  name       String
  startsAt   DateTime
  endsAt     DateTime
  multiplier Float
}

model AvailabilityBlock {
  id         String   @id @default(cuid())
  listingId  String
  listing    Listing  @relation(fields: [listingId], references: [id])
  startsAt   DateTime
  endsAt     DateTime
  reason     String?
}

model Booking {
  id                  String        @id @default(cuid())
  listingId           String
  listing             Listing       @relation(fields: [listingId], references: [id])
  guestId             String
  guest               User          @relation("BookingGuest", fields: [guestId], references: [id])
  startsAt            DateTime
  endsAt              DateTime
  status              BookingStatus @default(PENDING)
  currency            String        @default("GBP")
  priceBreakdown      Json
  stripePaymentIntentId String?
  stripeChargeId      String?
  depositHoldId       String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  messages            Message[]
  reviews             Review[]
  payment             Payment?      @relation("PaymentToBooking")
}

model Payment {
  id             String   @id @default(cuid())
  bookingId      String   @unique
  booking        Booking  @relation("PaymentToBooking", fields: [bookingId], references: [id])
  amount         Int
  currency       String   @default("GBP")
  applicationFee Int
  transferTo     String
  status         String
  createdAt      DateTime @default(now())
}

model Payout {
  id              String       @id @default(cuid())
  hostId          String
  host            User         @relation(fields: [hostId], references: [id])
  amount          Int
  currency        String @default("GBP")
  status          PayoutStatus @default(CREATED)
  stripeTransferId String?
  createdAt       DateTime @default(now())
}

model Message {
  id        String   @id @default(cuid())
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id])
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  text      String
  createdAt DateTime @default(now())
}

model Review {
  id         String   @id @default(cuid())
  bookingId  String
  booking    Booking  @relation(fields: [bookingId], references: [id])
  authorId   String
  author     User     @relation("ReviewAuthor", fields: [authorId], references: [id])
  rating     Int
  text       String?
  createdAt  DateTime @default(now())
}

model WebhookEvent {
  id        String   @id @default(cuid())
  provider  String
  type      String
  raw       Json
  createdAt DateTime @default(now())
}
